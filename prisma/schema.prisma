// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SELLER
  ADMIN
}

enum PurchaseStatus {
  PENDING
  PAID
  CANCELLED
  EXPIRE
}

enum SaleStatus {
  PENDING
  PAID
  CANCELLED
}

model User {
  id            Int      @id @default(autoincrement())
  code          String   @unique
  name          String
  email         String
  role          Role
  active        Boolean  @default(true)
  creation_date DateTime @default(now())
  Sale          Sale[]
}

model Customer {
  id            Int      @id @default(autoincrement())
  name          String
  email         String
  phone         String
  active        Boolean  @default(true)
  creation_date DateTime @default(now())
  Sale          Sale[]
}

model Supplier {
  id            Int        @id @default(autoincrement())
  name          String
  email         String
  phone         String
  active        Boolean    @default(true)
  creation_date DateTime   @default(now())
  Purchase      Purchase[]
}

model Brand {
  id            Int       @id @default(autoincrement())
  name          String
  logo          String
  active        Boolean   @default(true)
  creation_date DateTime  @default(now())
  Product       Product[]
}

model Category {
  id            Int       @id @default(autoincrement())
  name          String
  active        Boolean   @default(true)
  creation_date DateTime  @default(now())
  Product       Product[]
}

model Product {
  id             Int              @id @default(autoincrement())
  name           String
  description    String?
  image          String?
  stock          Int
  price          Decimal
  brand_id       Int
  category_id    Int?
  active         Boolean          @default(true)
  creation_date  DateTime         @default(now())
  brand          Brand            @relation(fields: [brand_id], references: [id], onDelete: Restrict)
  category       Category?        @relation(fields: [category_id], references: [id])
  SaleDetail     SaleDetail[]
  PurchaseDetail PurchaseDetail[]
}

model Location {
  id            Int      @id @default(autoincrement())
  name          String
  description   String?
  address       String
  active        Boolean  @default(true)
  creation_date DateTime @default(now())
  Sale          Sale[]
}

model PaymentMethod {
  id            Int      @id @default(autoincrement())
  name          String
  active        Boolean  @default(true)
  creation_date DateTime @default(now())
  Sale          Sale[]
}

model Sale {
  id                  Int           @id @default(autoincrement())
  user_id             Int?
  user_name           String?
  customer_id         Int?
  customer_name       String?
  total               Decimal
  payment_method_id   Int
  payment_method_name String
  location_id         Int
  location_name       String
  sale_status         SaleStatus
  date                DateTime
  creation_date       DateTime      @default(now())
  user                User?         @relation(fields: [user_id], references: [id])
  customer            Customer?     @relation(fields: [customer_id], references: [id])
  location            Location      @relation(fields: [location_id], references: [id], onDelete: Restrict)
  paymentMethod       PaymentMethod @relation(fields: [payment_method_id], references: [id], onDelete: Restrict)
  SaleDetail          SaleDetail[]
}

model SaleDetail {
  id            Int      @id @default(autoincrement())
  sale_id       Int
  product_id    Int
  quantity      Int
  unit_price    Decimal
  subtotal      Decimal
  creation_date DateTime @default(now())
  sale          Sale     @relation(fields: [sale_id], references: [id], onDelete: Restrict)
  product       Product  @relation(fields: [product_id], references: [id], onDelete: Restrict)
}

model SalesSummary {
  id               Int      @id @default(autoincrement())
  total            Decimal
  changePercentage Decimal
  creation_date    DateTime @default(now())
}

model Purchase {
  id              Int              @id @default(autoincrement())
  supplier_id     Int
  supplier_name   String
  total           Decimal
  purchase_status PurchaseStatus
  date            DateTime
  expiration_date DateTime
  creation_date   DateTime         @default(now())
  supplier        Supplier         @relation(fields: [supplier_id], references: [id], onDelete: Restrict)
  PurchaseDetail  PurchaseDetail[]
}

model PurchaseDetail {
  id            Int      @id @default(autoincrement())
  purchase_id   Int
  product_id    Int
  quantity      Int
  unit_price    Decimal
  subtotal      Decimal
  creation_date DateTime @default(now())
  purchase      Purchase @relation(fields: [purchase_id], references: [id], onDelete: Restrict)
  product       Product  @relation(fields: [product_id], references: [id], onDelete: Restrict)
}

model PurchaseSummary {
  id               Int      @id @default(autoincrement())
  total            Decimal
  changePercentage Decimal
  creation_date    DateTime @default(now())
}
